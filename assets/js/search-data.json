{
  
    
        "post0": {
            "title": "Book Review: The Pulp Mindset; A Newpub Survival Mindset",
            "content": "Book Review: The Pulp Mindset; A Newpub Survival Mindset . This book is about something worth noticing as the access to writing and publishing has broadened. There are healthy and helpful tips for writing and about writing learned from reading the Pulps of the past - and as someone that hasn’t read much of them and slowly breaking that particular seal I cannot agree more. However, reading the book feels more like what my own essays in high school felt like with repetition spread around and re-wordings of the same ideas. . That isn’t to say don’t purchase or read it; I think you should just because there is some good history here. The author’s knowledge about such topics as the speech Mutation or Death was quite a surprise and the relationship between Old Pub and New Pub is a meaningful distinction that Cowan does well. Personally, I think he’s overselling it as there is enough poor writing on display via Amazon Unlimited or niches such as LitRPG where the divide between practiced writers or amateurs shows up from the first page. . All in all, spend the money but get it in digital. .",
            "url": "https://orgulo.us/books/review/writing/2020/10/28/The-Pulp-Mindset-Review.html",
            "relUrl": "/books/review/writing/2020/10/28/The-Pulp-Mindset-Review.html",
            "date": " • Oct 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Simple Introduction to Python Debugging",
            "content": "Inspiration . While working on a script that I’m writing for work, I was having trouble really tracking down where my logic was failing. After looking over the code, everything looked correct but the results were showing me otherwise. So, I opened up python’s debugging system and started to dig in. . What is Debugging? . In computer programming and software development, debugging is the process of finding and resolving bugs (defects or problems that prevent correct operation) within computer programs, software, or systems. cf: https://en.wikipedia.org/wiki/Debugging . There are plenty of tools to do stuff like this but Python comes with its own: pdb — The Python Debugger. To activate it, you’d simply go into your terminal and type: . user@station# python3 -m pdb &lt;script-name&gt; . This with start the script from the top and immediately stop before running anything: . user@station:/scripts# python3 -m pdb keyIntegrityCheck.py &gt; /scripts/keyIntegrityCheck.py(5)&lt;module&gt;() -&gt; from pathlib import Path (Pdb) . While this is useful, we need to be able to explore the file. You could keep an editor open on a different monitor and move around but sometimes that’s not going to be an option. To print all the lines in the file you’d use: . (Pdb) ll 1 #!/usr/bin/env python3 2 ## Author: Collin Mitchell 3 ## Purpose: To check the integrity of keys without user input. 4 5 -&gt; from pathlib import Path 6 from itertools import filterfalse 7 import subprocess as sp 8 import json 9 import sys # ... 370 integrityFunc = dd.get(str(filename).split(&#39;.&#39;)[-1]) 371 if integrityFunc: 372 consistent = integrityFunc( filename ) 373 if not consistent: print(&quot;{} is not consistent.&quot;.format(filename)) 374 else: 375 print(&quot;{} is missing a checker; please report {} so it can be added.&quot;.format(filename,filename)) (Pdb) . You can see the pointer on line five telling us where the current execution point is. We can move the pointer a single line using n: . (Pdb) n [336/1995] &gt; /scripts/keyIntegrityCheck.py(6)&lt;module&gt;() -&gt; from itertools import filterfalse (Pdb) ll 1 #!/usr/bin/env python3 2 ## Author: Collin Mitchell 3 ## Purpose: To check the integrity of keys without user input. 4 5 from pathlib import Path 6 -&gt; from itertools import filterfalse 7 import subprocess as sp 8 import json 9 import sys . You can see the next 11 lines in the console buffer using l: . (Pdb) l 1 #!/usr/bin/env python3 2 ## Author: Collin Mitchell 3 ## Purpose: To check the integrity of keys without user input. 4 5 from pathlib import Path 6 -&gt; from itertools import filterfalse 7 import subprocess as sp 8 import json 9 import sys 10 11 # stuff to do with phpserialize: (Pdb) . Not that if you do this and run it again that you wont get the same result: . (Pdb) l 12 import codecs 13 try: 14 codecs.lookup_error(&#39;surrogateescape&#39;) 15 default_errors = &#39;surrogateescape&#39; 16 except LookupError: 17 default_errors = &#39;strict&#39; 18 try: 19 xrange 20 except NameError: 21 xrange = range 22 try: (Pdb) . … but you will get the next 11 lines instead. You can tell it which lines to list centered on a line number using l 10: . (Pdb) l 10 5 from pathlib import Path 6 -&gt; from itertools import filterfalse 7 import subprocess as sp 8 import json 9 import sys 10 11 # stuff to do with phpserialize: 12 import codecs 13 try: 14 codecs.lookup_error(&#39;surrogateescape&#39;) 15 default_errors = &#39;surrogateescape&#39; (Pdb) . Now that we can move around, let’s discuss how to actually stop code execution using breakpoints. These are locations you set - sometimes with conditions - to stop the code execution and explore the current state. You can set these using ‘b’: . (Pdb) b (Pdb) . Since we don’t have any breakpoints set, then it makes sense we don’t see any listed. So, now lets set one: . (Pdb) b 9 Breakpoint 1 at /scripts/keyIntegrityCheck.py:9 (Pdb) . … and continue execution until the breakpoint using c: . (Pdb) c &gt; /scripts/keyIntegrityCheck.py(9)&lt;module&gt;() -&gt; import sys (Pdb) . … and list the active breakpoints again: . (Pdb) b Num Type Disp Enb Where 1 breakpoint keep yes at /scripts/keyIntegrityCheck.py:9 breakpoint already hit 1 time (Pdb) . You can clear that breakpoint using the number of the breakpoint as well: . (Pdb) b Num Type Disp Enb Where 1 breakpoint keep yes at /scripts/keyIntegrityCheck.py:9 breakpoint already hit 1 time (Pdb) cl 1 Deleted breakpoint 1 at /scripts/keyIntegrityCheck.py:9 (Pdb) b (Pdb) . Conditional breakpoints I found a bit tricky to get to work correctly because you need to place a comma after the statement: . (Pdb) b 371, integrityFunc.__name__ == &#39;integrityPhp&#39; Breakpoint 3 at /scripts/keyIntegrityCheck.py:371 (Pdb) . … and then you c until it triggers: . &gt; /scripts/keyIntegrityCheck.py(371)&lt;module&gt;() -&gt; if integrityFunc: (Pdb) integrityFunc &lt;function integrityPhp at 0x7f99291477b8&gt; (Pdb) . Conclusion . I couldn’t find much outside of the official documentation when I needed it so hopefully you find the highlights useful. There are also tools for whichever IDE you’re using so look out for those as well. .",
            "url": "https://orgulo.us/python/programming/debugging/2020/10/21/Simple-Python-Debugging-Example.html",
            "relUrl": "/python/programming/debugging/2020/10/21/Simple-Python-Debugging-Example.html",
            "date": " • Oct 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Game Review: Post Void",
            "content": "Post Void is a hypnotic scramble of early first-person shooter design that values speed above all else. Keep your head full and reach the end; Kill what you can to see it mend; Get the high score or try again.” . About a month ago I Steam was kind enough to recommend a rough looking LSD-inspired shooter. And, this little gem is called Post Void created by a little Developer group called YCJY Games. Looking at the videos, screenshots and description I was immediately sold: . “Post Void is a hypnotic scramble of early first-person shooter design that values speed above all else. Keep your head full and reach the end; Kill what you can to see it mend; Get the high score or try again.” . . The game delivers on all of that with the classic Arcade Shooter style that I miss everytime I spin up any modern First Person Shooter and with a price tag of $2.99, there wasn’t any risk. . There is a tutorial level to get you acquainted with the basic ideas of the game - which is really just: You have a slide like many modern shooters. Your health is that glass tiki skull which drains away. Then you’re dropped right in and good luck. . The management of your health which forces you to press on creates a fun stresser which is simple but not overwhelming to manage: kill to fill. The enemy varieties are also limited for the 11 stages you race through - which isn’t all that many. It’s not a long game and wouldn’t actually mind seeing a Post Void 2 which pulls some elements from Rouge-likes and maybe a bit of coop shuffle. Also, the aim is a bit forgiving and there were moments where I was sure I would miss but still killed an enemy. . The art style is a bit rough on the eyes at first but actually is the right choice to make registering enemies and threats blend into the background just enough that you can miss or run right into them if you’re not careful. I’m also partial to colorful games so I admit this visually is my kind of game. . All in all, I’d recommend stuffing this game into downtime between lobbies and breaks between studying to stay alert. . Also, the Shotgun is best. Who knows why anyone wants to use the knife: weirdos. .",
            "url": "https://orgulo.us/game/review/lsd/arcade%20shooter/2020/09/30/Game-Review-Post-Void.html",
            "relUrl": "/game/review/lsd/arcade%20shooter/2020/09/30/Game-Review-Post-Void.html",
            "date": " • Sep 30, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Game Review: Empyrion - Galactic Survival",
            "content": "Game Review: Empyrion - Galactic Survival . If you’re looking for a TL:DR: game is fun but has some challenges. . The first time I opened the map to see all the different systems we could visit I was basically sold on the game. The first time we made our system hop, we almost got trapped in hellscape and had a blast trying to get off that planet. . Empyrion - Galactic Survival is - well - a Survival Game that adds the idea of different planets and systems to explore instead of simply other towns or woods or whatever that splotch over that hill is. What’s nice about it was as you explore the menus, it gives you something to plan for while trying to build up some semblance of safety where you are. As you scroll out, there are hundreds of systems to explore with their own rings of planets and moons and asteroid fields - which really is the allure of this game. I want to float around the Galaxy and do stupid things. . Out of the gate, there are lots of geometries to play with when building bases or anything else which is a nice change from other Survival games where you’re kind of stuck with a few pre-defined structures. Sadly, the internal structure of the actual block shape wont impact where you can actually place anything since you’re still locked into a cubic construction system. This does make a good number of the more interesting shapes rather impractical to try and use on anything you build. . The plethora of pieces to care about makes navigating and management challenging. Finding out just how to build your first actual base was annoying until you realize that you need a core or a starter block to build off anything. Different blocks are tied to different kinds of structures which are denoted by the initials HV,CV,SV,BA which are just not explained. You’re going to be reading the descriptions of the stuff you build; you’re going to have to just about all the time because you’re going to miss important details. My mistake was not realizing that shields will require a Pentaxid to fuel them and there is no warning about this until the shields don’t work - except the last line in the text. A better idea maybe would have been that you don’t have any shields until you’ve actually fed your Vessel Pentaxid and therefore you’ll be forced to realize this. There is a good amount of finding out the hard way. . Likewise, there are lots of small stats and management that goes into a base which make sense but just don’t feel intuitive at all. I know that I need power and to do that I need something which makes power but I don’t know anything about Solar Panel rates from looking at the device before construction; there is no real way to optimize buildings or make decisions about if I want something until I’ve made it and realized that I either don’t need it yet or it’s missing necessary components. The Solar Panels need a Capacitor else they’re really not much use once the sun is down - and the base doesn’t store anything. Explore the Control Panel as soon as you can. . Contrary to some complaints, the combat isn’t bad for a Survival game and fights in space have been pretty fun. Having my friend float around in a tuned Small Vessel hecking out resources in Zirax controlled space to avoid pulling us into a space fight with our starter Capital Vessel only to be discovered by a wandering drone led to quite the episode of us coordinating his docking while everything in the system came to murder us escaping with a queue’d up lock to a different system for just such an emergency is why this game has been fun. The complaints about being outgunned are certainly true though. The Defense Station that sits just outside the atmosphere is a space graveyard of failed attempts to kick it out of the orbit. After building a prototype to try and kill the thing, I point-blanked it with 6 pulse Lasers 49 times before it finally blew apart my small vessel and I lost. The AI for the enemies in the game is certainly questionable too. I’ve watched as three factions of different types mingle with one another as if they’re not even aware of each other until I am taking shots at them and then they’re all after me like there is some pact to murder non-NPCs in the Galaxy on sight. . All in all, I’m not regretting buying it and it’s probably my favorite current Survival game. I think that the criticisms are pretty fair though; the game is very ambitious and they haven’t delivered yet but the platform is there so long as they’re continuing to diligently add the pieces patch by patch I’ll keep playing it. Complicated but promising. .",
            "url": "https://orgulo.us/games/review/scifi/survival/2020/09/18/Game-Review-Empyrion-Galactic-Survival.html",
            "relUrl": "/games/review/scifi/survival/2020/09/18/Game-Review-Empyrion-Galactic-Survival.html",
            "date": " • Sep 18, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastbooks Incidentally Supports R",
            "content": "Pleasant Surprise . While trying to test the boundaries of what fastpages actually supports, I figured I&#39;d try out installing and setting up an R Notebook as well. Luckily enough, it does indeed support compiling and building R kernels as well. . The first step will be to install an R kernel for the notebook which can be done using: . conda install -c r r-essentials . This can be ran either from inside a notebook by prepending a ! in a cell such as !conda install -c r r-essentials or simply run it at the console if you&#39;re in linux and in the project directory. . This is mostly an exibition post about how this can be done so we&#39;re just going to show off some R stuff. . # I miss this selecting over Python&#39;s Pandas: mtcars[order(mtcars$gear, mtcars$mpg), ] . mpgcyldisphpdratwtqsecvsamgearcarb . Cadillac Fleetwood10.4 | 8 | 472.0 | 205 | 2.93 | 5.250 | 17.98 | 0 | 0 | 3 | 4 | . Lincoln Continental10.4 | 8 | 460.0 | 215 | 3.00 | 5.424 | 17.82 | 0 | 0 | 3 | 4 | . Camaro Z2813.3 | 8 | 350.0 | 245 | 3.73 | 3.840 | 15.41 | 0 | 0 | 3 | 4 | . Duster 36014.3 | 8 | 360.0 | 245 | 3.21 | 3.570 | 15.84 | 0 | 0 | 3 | 4 | . Chrysler Imperial14.7 | 8 | 440.0 | 230 | 3.23 | 5.345 | 17.42 | 0 | 0 | 3 | 4 | . Merc 450SLC15.2 | 8 | 275.8 | 180 | 3.07 | 3.780 | 18.00 | 0 | 0 | 3 | 3 | . AMC Javelin15.2 | 8 | 304.0 | 150 | 3.15 | 3.435 | 17.30 | 0 | 0 | 3 | 2 | . Dodge Challenger15.5 | 8 | 318.0 | 150 | 2.76 | 3.520 | 16.87 | 0 | 0 | 3 | 2 | . Merc 450SE16.4 | 8 | 275.8 | 180 | 3.07 | 4.070 | 17.40 | 0 | 0 | 3 | 3 | . Merc 450SL17.3 | 8 | 275.8 | 180 | 3.07 | 3.730 | 17.60 | 0 | 0 | 3 | 3 | . Valiant18.1 | 6 | 225.0 | 105 | 2.76 | 3.460 | 20.22 | 1 | 0 | 3 | 1 | . Hornet Sportabout18.7 | 8 | 360.0 | 175 | 3.15 | 3.440 | 17.02 | 0 | 0 | 3 | 2 | . Pontiac Firebird19.2 | 8 | 400.0 | 175 | 3.08 | 3.845 | 17.05 | 0 | 0 | 3 | 2 | . Hornet 4 Drive21.4 | 6 | 258.0 | 110 | 3.08 | 3.215 | 19.44 | 1 | 0 | 3 | 1 | . Toyota Corona21.5 | 4 | 120.1 | 97 | 3.70 | 2.465 | 20.01 | 1 | 0 | 3 | 1 | . Merc 280C17.8 | 6 | 167.6 | 123 | 3.92 | 3.440 | 18.90 | 1 | 0 | 4 | 4 | . Merc 28019.2 | 6 | 167.6 | 123 | 3.92 | 3.440 | 18.30 | 1 | 0 | 4 | 4 | . Mazda RX421.0 | 6 | 160.0 | 110 | 3.90 | 2.620 | 16.46 | 0 | 1 | 4 | 4 | . Mazda RX4 Wag21.0 | 6 | 160.0 | 110 | 3.90 | 2.875 | 17.02 | 0 | 1 | 4 | 4 | . Volvo 142E21.4 | 4 | 121.0 | 109 | 4.11 | 2.780 | 18.60 | 1 | 1 | 4 | 2 | . Datsun 71022.8 | 4 | 108.0 | 93 | 3.85 | 2.320 | 18.61 | 1 | 1 | 4 | 1 | . Merc 23022.8 | 4 | 140.8 | 95 | 3.92 | 3.150 | 22.90 | 1 | 0 | 4 | 2 | . Merc 240D24.4 | 4 | 146.7 | 62 | 3.69 | 3.190 | 20.00 | 1 | 0 | 4 | 2 | . Fiat X1-927.3 | 4 | 79.0 | 66 | 4.08 | 1.935 | 18.90 | 1 | 1 | 4 | 1 | . Honda Civic30.4 | 4 | 75.7 | 52 | 4.93 | 1.615 | 18.52 | 1 | 1 | 4 | 2 | . Fiat 12832.4 | 4 | 78.7 | 66 | 4.08 | 2.200 | 19.47 | 1 | 1 | 4 | 1 | . Toyota Corolla33.9 | 4 | 71.1 | 65 | 4.22 | 1.835 | 19.90 | 1 | 1 | 4 | 1 | . Maserati Bora15.0 | 8 | 301.0 | 335 | 3.54 | 3.570 | 14.60 | 0 | 1 | 5 | 8 | . Ford Pantera L15.8 | 8 | 351.0 | 264 | 4.22 | 3.170 | 14.50 | 0 | 1 | 5 | 4 | . Ferrari Dino19.7 | 6 | 145.0 | 175 | 3.62 | 2.770 | 15.50 | 0 | 1 | 5 | 6 | . Porsche 914-226.0 | 4 | 120.3 | 91 | 4.43 | 2.140 | 16.70 | 0 | 1 | 5 | 2 | . Lotus Europa30.4 | 4 | 95.1 | 113 | 3.77 | 1.513 | 16.90 | 1 | 1 | 5 | 2 | . mtcars[order(mtcars$gear, mtcars$mpg), ] %&gt;% ggplot(aes(disp, hp, colour = cyl)) + geom_point() . crimes &lt;- data.frame(state = tolower(rownames(USArrests)), USArrests) # Equivalent to crimes %&gt;% tidyr::pivot_longer(Murder:Rape) vars &lt;- lapply(names(crimes)[-1], function(j) { data.frame(state = crimes$state, variable = j, value = crimes[[j]]) }) crimes_long &lt;- do.call(&quot;rbind&quot;, vars) states_map &lt;- map_data(&quot;state&quot;) ggplot(crimes_long, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + expand_limits(x = states_map$long, y = states_map$lat) + facet_wrap( ~ variable) . I did also try to use ggvis as well but it just wont display properly so that&#39;s unfortunately out. .",
            "url": "https://orgulo.us/r/jupyter/ggplot/2020/09/09/Fastbooks-Incidentally-Supports-R.html",
            "relUrl": "/r/jupyter/ggplot/2020/09/09/Fastbooks-Incidentally-Supports-R.html",
            "date": " • Sep 9, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "A Post Exploring Altair",
            "content": "This Is The Tool We Have . I&#39;m trying out the fastpages in hopes that I wont have to spend the time building out my own website toolset. I&#39;ve been slowly building something out of Wagtail which is a really just Djnago with some bells. The real allure though is going to be the Notebook conversions - specifically the Data Visualizations. The library for interactive version is Altair and we&#39;re going to explore some data! . Lets Explore! . So, the tutorial for Scatter Plot uses the car data but I figured we mind as well do the classic Iris dataset. We&#39;ll start by importing the dataset from vega_datasets - which is the Javascript library that Altair is built on top of - using iris = data.iris(). . iris = data.iris() iris . sepalLength sepalWidth petalLength petalWidth species . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | . ... ... | ... | ... | ... | ... | . 145 6.7 | 3.0 | 5.2 | 2.3 | virginica | . 146 6.3 | 2.5 | 5.0 | 1.9 | virginica | . 147 6.5 | 3.0 | 5.2 | 2.0 | virginica | . 148 6.2 | 3.4 | 5.4 | 2.3 | virginica | . 149 5.9 | 3.0 | 5.1 | 1.8 | virginica | . 150 rows × 5 columns . First lets see the graph - and then we&#39;ll discuss the functions . alt .Chart(iris) .mark_point() .encode( x=&#39;sepalLength&#39;, y=&#39;sepalWidth&#39;, color=&#39;species&#39;, tooltip = [&#39;species&#39;, &#39;petalLength&#39;, &#39;petalWidth&#39;] ) .interactive() . It is interesting to note that - per the Docs - : . Create a basic Altair/Vega-Lite chart. . Although it is possible to set all Chart properties as constructor attributes, it is more idiomatic to use methods such as mark_point(), encode(), transform_filter(), properties(), etc. . .. which means that it&#39;s found a way to do something similar to the R Programming Languages pipe operator. For reference, it would looks something like this:mtcars %&gt;% ggplot(aes(wt, mpg)) + geom_point(aes(colour = factor(cyl))) . . First we tell altair to make a chart using the dataset we&#39;re using: . .Chart(iris) . ... which is then followed by the kind of graph that we&#39;re after - in this case we&#39;re after a scatter plot: . .mark_point() . ... and then we tell it where everything belongs. . .encode( x=&#39;sepalLength&#39;, y=&#39;sepalWidth&#39;, color=&#39;species&#39;, tooltip = [&#39;species&#39;, &#39;petalLength&#39;, &#39;petalWidth&#39;] ) . Of interest is that you can add data from the other columns easily using the tooltip without having to add anything extra. Layering information which is relevant but lacks a meaningful graphic representation was a nice touch. . Then of course, you allow users to interact with it via: . .interactive() . Lets see what this post looks like on the blog! .",
            "url": "https://orgulo.us/altair/jupyter/python/2020/09/06/exploring-altair-visualization.html",
            "relUrl": "/altair/jupyter/python/2020/09/06/exploring-altair-visualization.html",
            "date": " • Sep 6, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Book Review: Voices of the Void",
            "content": "Book Review: Voices of the Void . The Voices of the Void by David Stewart is a pleasant short story that mixes a Science Fiction backdrop with some supernatural horror. We join the introduced protagonist - Andrew Dalatent - entering a mining colony called New Gibralter where he appears tasked with figuring out what happened to the people there. And, I say it appears because as he starts his descent you find out he’s more aware of the whys and whats of the situation than is initially let on. . Coupled with his own supernatural ability to observe future and past versions of events around him, we get to join him as he tries to survive against humanity removed of its own free will. These sections that Stewart uses were my own personal favorite because they’re surprisingly easy to follow but also because they grow slowly out of being just a novel tactic Andrew uses to protect himself into an important aspect of the later story. . Short read but enjoyable. .",
            "url": "https://orgulo.us/books/review/scifi/2020/07/09/Voices-of-the-Void.html",
            "relUrl": "/books/review/scifi/2020/07/09/Voices-of-the-Void.html",
            "date": " • Jul 9, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://orgulo.us/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}